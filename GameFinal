import java.util.Scanner;

public class Main {

    public static void main(String[] args) {

        String cross = "[X]";
        String star = "[*]";
        String empty = "   ";
        String box = "[ ]";
        boolean key = false;

        String[][] boardX = { {"  ", "1 ",   " 2 ",   " 3 ", empty},
                            {  "1",  empty, box, empty, empty},
                            {  "2",  box, box, box, empty},
                            {  "3",  box, star, box, empty},
                            {  "4",  cross, box, cross, empty},
                            {  "5",  empty, cross, empty, empty},
                            { empty, empty, empty, empty, empty}};

        while (true) {
            printBoard(boardX);
            if(!isWinner(boardX)){
                break;
            }
                    if(key){
                        System.out.println("Ходит игрок №2(звёздочка):\n2 - вниз; 8 - вверх; 4 - влево; 6 - вправо.");
                        int [] massStar = searchStarOnBoardX(boardX);
                        playerStar(boardX, massStar[0], massStar[1]);
                        key = false;
                    } else{
                        System.out.println("Ходит игрок №1(крестики):\nВыберите координаты крестика. Сперва №строки + [ENTER], потом №столбца + [ENTER]");
                        playerCross(boardX);
                        key = true;
                    }
            }
        }

    public static void printBoard(String [][] board){
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        }
    }

    public static boolean isWinner(String [][] boardW){
        int [] mass;
        if(boardW[1][2].equals("[X]")) {
            System.out.println("Победил игрок №1");
            return false;
        }
            mass = searchStarOnBoardX(boardW);
           return searchCrossOnBoardX(boardW, mass[0], mass[1]);
    }

    public static void playerCross(String [][] boardPlFirst){
        Scanner input = new Scanner(System.in);
        int line = 0;
        int column = 0;
        while (true){
              try {
                line = input.nextInt();
                column = input.nextInt();
                if(!(boardPlFirst[line][column].equals("[X]"))){
                    System.out.println("Выберите координаты крестика!");
                } else if(boardPlFirst[line -1][column].equals("[*]")) {
                    System.out.println("Так ходить нельзя! Мешает звёздочка!");
                } else if(boardPlFirst[1][2].equals("[*]") && boardPlFirst[line -1][column].equals("   ") ) {
                    System.out.println("Так ходить нельзя! Мешает звёздочка!");
                } else if(!boardPlFirst[line -1][column].equals("[ ]") && !boardPlFirst[line][column -1].equals("[ ]")) {
                    String s = boardPlFirst[line][column];
                    boardPlFirst[line][column] = boardPlFirst[line - 1][column + 1];
                    boardPlFirst[line - 1][column + 1] = s;
                    break;
                } else if(!boardPlFirst[line -1][column].equals("[ ]") && !boardPlFirst[line][column + 1].equals("[ ]")) {
                    String s = boardPlFirst[line][column];
                    boardPlFirst[line][column] = boardPlFirst[line - 1][column - 1];
                    boardPlFirst[line - 1][column - 1] = s;
                    break;
                }else{
                    String s = boardPlFirst[line][column];
                    boardPlFirst[line][column] = boardPlFirst[line - 1][column];
                    boardPlFirst[line - 1][column] = s;
                    break;
                }
              } catch (Exception e) {
                System.out.println("Нет таких координат! Введите заново.");
            }
        }
    }

    public static boolean searchStarWithBox(String[][] board , int x, int y){
        if(!board[x - 1][y].equals("[ ]")&&!board[x][y - 1].equals("[ ]")&&!board[x + 1][y].equals("[ ]")&&!board[x][y + 1].equals("[ ]")){
            System.out.println("Победил игрок №2");
            return false;
        }
        return true;
    }

    public static int[] searchStarOnBoardX(String [][] board){
            int [] mass = new int [2];
            for (int i = 0; i < board.length; i++) {
                for (int j = 0; j < board[i].length; j++) {
                    if (board[i][j].equals("[*]")) {
                        mass[0] = i;
                        mass[1] = j;
                        i = board.length -1;
                        j = board[i].length - 1;
                    }
                }
            }
            return mass;
        }

    public static boolean searchCrossOnBoardX(String [][] board, int star, int starY){
        int count = 0;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j].equals("[X]") && i>star) {
                    i = board.length - 1;
                    j = board[i].length - 1;
                }else if(board[i][j].equals("[X]") && i<star){
                    count ++;
                }
            }
        }
        if (count == 3){
            System.out.println("Победил игрок №2");
            return false;
        }
        return searchStarWithBox(board, star, starY);
    }

    public static void playerStar(String [][] boardPlayerSecond, int x, int y){
        Scanner input = new Scanner(System.in);
        int move = 0;
        int mass[] = searchStarOnBoardX(boardPlayerSecond);
        while (true){
            try {
                move = input.nextInt();
                if(move == 8 && boardPlayerSecond[x - 1][y].equals("[ ]")){
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x - 1][y];
                    boardPlayerSecond[x - 1][y] = s;
                    break;
                }else if(move == 2 && boardPlayerSecond[x + 1][y].equals("[ ]")) {
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x + 1][y];
                    boardPlayerSecond[x + 1][y] = s;
                    break;
                }else if(move == 4 && boardPlayerSecond[x][y - 1].equals("[ ]")) {
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x][y - 1];
                    boardPlayerSecond[x][y - 1] = s;
                    break;
                }else if(move == 4 && boardPlayerSecond[x + 1][y - 1].equals("[ ]") && mass[0] == 1 && mass[1] == 2) {
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x + 1][y - 1];
                    boardPlayerSecond[x + 1][y - 1] = s;
                    break;
                }
                else if(move == 6 && boardPlayerSecond[x][y + 1].equals("[ ]")) {
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x][y + 1];
                    boardPlayerSecond[x][y + 1] = s;
                    break;
                } else if(move == 6 && boardPlayerSecond[x + 1][y + 1].equals("[ ]")  && mass[0] == 1 && mass[1] == 2) {
                    String s = boardPlayerSecond[x][y];
                    boardPlayerSecond[x][y] = boardPlayerSecond[x + 1][y + 1];
                    boardPlayerSecond[x + 1][y + 1] = s;
                    break;
                } else {
                    System.out.println("Нет возможности так походить. Повторите ход!");
                }
            } catch (Exception e) {
                System.out.println("Вы ввели белиберду!");
            }
        }
    }
}



